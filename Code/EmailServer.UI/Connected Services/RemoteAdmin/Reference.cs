//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmailServer.UI.RemoteAdmin {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteAdmin.RemoteAdminSoap")]
    public interface RemoteAdminSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetConfigurationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SaveConfiguration(int fetch_seconds, string email, string smtp_url, int smtp_port, bool smtp_usessl, string pop3_url, int pop3_port, bool pop3_usessl, string email_password, string display_name, string bad_response_mail_subject, string bad_response_mail_body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task SaveConfigurationAsync(int fetch_seconds, string email, string smtp_url, int smtp_port, bool smtp_usessl, string pop3_url, int pop3_port, bool pop3_usessl, string email_password, string display_name, string bad_response_mail_subject, string bad_response_mail_body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMaxLogId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long GetMaxLogId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMaxLogId", ReplyAction="*")]
        System.Threading.Tasks.Task<long> GetMaxLogIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLogInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLogInfo(long log_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLogInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogInfoAsync(long log_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchPOP3Fetch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FetchPOP3Fetch(string hostname, int port, bool useSsl, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchPOP3Fetch", ReplyAction="*")]
        System.Threading.Tasks.Task FetchPOP3FetchAsync(string hostname, int port, bool useSsl, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UserExists(string phone_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string phone_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveSafeList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SaveSafeList(string phone_number, string sender_mail, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveSafeList", ReplyAction="*")]
        System.Threading.Tasks.Task SaveSafeListAsync(string phone_number, string sender_mail, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSafeList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSafeList(string sender_mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSafeList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSafeListAsync(string sender_mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SaveUser(string phone_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveUser", ReplyAction="*")]
        System.Threading.Tasks.Task SaveUserAsync(string phone_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RemoteAdminSoapChannel : EmailServer.UI.RemoteAdmin.RemoteAdminSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteAdminSoapClient : System.ServiceModel.ClientBase<EmailServer.UI.RemoteAdmin.RemoteAdminSoap>, EmailServer.UI.RemoteAdmin.RemoteAdminSoap {
        
        public RemoteAdminSoapClient() {
        }
        
        public RemoteAdminSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteAdminSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteAdminSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteAdminSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public System.Data.DataTable GetConfiguration() {
            return base.Channel.GetConfiguration();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetConfigurationAsync() {
            return base.Channel.GetConfigurationAsync();
        }
        
        public void SaveConfiguration(int fetch_seconds, string email, string smtp_url, int smtp_port, bool smtp_usessl, string pop3_url, int pop3_port, bool pop3_usessl, string email_password, string display_name, string bad_response_mail_subject, string bad_response_mail_body) {
            base.Channel.SaveConfiguration(fetch_seconds, email, smtp_url, smtp_port, smtp_usessl, pop3_url, pop3_port, pop3_usessl, email_password, display_name, bad_response_mail_subject, bad_response_mail_body);
        }
        
        public System.Threading.Tasks.Task SaveConfigurationAsync(int fetch_seconds, string email, string smtp_url, int smtp_port, bool smtp_usessl, string pop3_url, int pop3_port, bool pop3_usessl, string email_password, string display_name, string bad_response_mail_subject, string bad_response_mail_body) {
            return base.Channel.SaveConfigurationAsync(fetch_seconds, email, smtp_url, smtp_port, smtp_usessl, pop3_url, pop3_port, pop3_usessl, email_password, display_name, bad_response_mail_subject, bad_response_mail_body);
        }
        
        public long GetMaxLogId() {
            return base.Channel.GetMaxLogId();
        }
        
        public System.Threading.Tasks.Task<long> GetMaxLogIdAsync() {
            return base.Channel.GetMaxLogIdAsync();
        }
        
        public System.Data.DataTable GetLogInfo(long log_id) {
            return base.Channel.GetLogInfo(log_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogInfoAsync(long log_id) {
            return base.Channel.GetLogInfoAsync(log_id);
        }
        
        public void FetchPOP3Fetch(string hostname, int port, bool useSsl, string username, string password) {
            base.Channel.FetchPOP3Fetch(hostname, port, useSsl, username, password);
        }
        
        public System.Threading.Tasks.Task FetchPOP3FetchAsync(string hostname, int port, bool useSsl, string username, string password) {
            return base.Channel.FetchPOP3FetchAsync(hostname, port, useSsl, username, password);
        }
        
        public bool UserExists(string phone_number) {
            return base.Channel.UserExists(phone_number);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string phone_number) {
            return base.Channel.UserExistsAsync(phone_number);
        }
        
        public void SaveSafeList(string phone_number, string sender_mail, string token) {
            base.Channel.SaveSafeList(phone_number, sender_mail, token);
        }
        
        public System.Threading.Tasks.Task SaveSafeListAsync(string phone_number, string sender_mail, string token) {
            return base.Channel.SaveSafeListAsync(phone_number, sender_mail, token);
        }
        
        public System.Data.DataTable GetSafeList(string sender_mail) {
            return base.Channel.GetSafeList(sender_mail);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSafeListAsync(string sender_mail) {
            return base.Channel.GetSafeListAsync(sender_mail);
        }
        
        public void SaveUser(string phone_number) {
            base.Channel.SaveUser(phone_number);
        }
        
        public System.Threading.Tasks.Task SaveUserAsync(string phone_number) {
            return base.Channel.SaveUserAsync(phone_number);
        }
        
        public System.Data.DataTable GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
    }
}
